import java.awt.Point;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * A class to represent the mosaic technique. A mosaic breaks down an image into clusters to give it
 * a stained-glass window effect.
 */
public class Mosaic implements Reduce {
  private int numSeeds;

  /**
   * Constructs a dither object. This should be passed into the reduce() method in Image.
   *
   * @param numSeeds the intended number of seeds to generate
   * @throws IllegalArgumentException if trying to produce 0 or negative seeds
   */
  public Mosaic(int numSeeds) throws IllegalArgumentException {
    if (numSeeds <= 0) {
      throw new IllegalArgumentException("Mosaic must take 1 or more seeds");
    }
    // Create a mosaic object
    this.numSeeds = numSeeds;
  }

  @Override
  public int[][][] applyReduce(int[][][] source) {
    Image clone = new ImageModel(source);
    int[][][] pixels = clone.getPixels();
    List<int[]> seeds = generateSeeds(source);
    for (int i = 0; i < source.length; i++) {
      for (int j = 0; j < source[i].length; j++) {
        Point p = new Point(j, i);
        int[] matchingSeed = categorizePoint(p, seeds);
        int seedX = matchingSeed[0];
        int seedY = matchingSeed[1];
        pixels[i][j] = source[seedY][seedX];
      }
    }
    return pixels;
  }

  /**
   * Helper method to randomly choose a number of pixels from the image to be seeds.
   *
   * @param pixels the array of ints that represent the source image
   * @return seeds, a list of int[] representing the randomized seeds
   */
  private List<int[]> generateSeeds(int[][][] pixels) {
    List<int[]> seeds = new ArrayList<>();
    int k = this.numSeeds;
    for (int i = 0; i < k; i++) {
      int x = (int) (Math.random() * pixels[0].length);
      int y = (int) (Math.random() * pixels.length);
      //System.out.println("" + x + " " + y);
      int[] newSeed = {x, y};
      if (!seeds.contains(newSeed)) {
        seeds.add(newSeed);
      }
    }
    return seeds;
  }

  /**
   * Helper method that assigns a single point to its closest seed in the image.
   *
   * @param p a single point that represents a pixel in the image
   * @param seeds the list of seeds randomly generated by the clustering algorithm
   * @return the pixel corresponding to the seed that is closest to the given point
   */
  private int[] categorizePoint(Point p, List<int[]> seeds) {
    List<Double> distances = new ArrayList<>();
    for (int[] seed : seeds) {
      Point q = new Point(seed[0], seed[1]);
      double dist = p.distance(q);
      distances.add(dist);
    }
    Object minimumDistance = Collections.min(distances);
    int[] returnSeed = seeds.get(distances.indexOf(minimumDistance));
    return returnSeed;
  }
}

